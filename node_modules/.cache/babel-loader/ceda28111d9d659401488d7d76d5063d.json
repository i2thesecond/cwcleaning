{"ast":null,"code":"import React from 'react';\nimport { Range, Direction } from 'react-range';\nimport { styled } from '@stitches/react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar aspectRatioRegex = /*#__PURE__*/new RegExp(/(\\d+)(:|x)(\\d+)/);\n\nfunction calculateAspectRatio(ratio) {\n  var asNumber = Number(ratio);\n  var asString = String(ratio);\n  var isNumber = !isNaN(asNumber);\n\n  if (isNumber) {\n    return 1 / asNumber * 100;\n  } else {\n    var match = asString.match(aspectRatioRegex);\n    if (!match) throw Error('Please use a valid aspect ratio delimeter, either \"x\" or \":\"');\n    var width = Number(match[1]);\n    var height = Number(match[3]);\n    return height / width * 100;\n  }\n}\n\nfunction isFunction(functionToCheck) {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\nvar _excluded = [\"isFocused\"];\nvar PinnedDiv = /*#__PURE__*/styled('div', {\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  position: 'absolute'\n});\nvar Track = /*#__PURE__*/styled(PinnedDiv, {\n  background: 'transparent',\n  zIndex: 10\n});\nvar RangeWrap = PinnedDiv;\nvar Element = /*#__PURE__*/styled(PinnedDiv, {\n  '> *': {\n    height: '100%'\n  },\n  '> *:not(style) + *': {\n    height: 'unset'\n  }\n});\nvar Handle = /*#__PURE__*/styled('div', {\n  width: 16,\n  height: 16,\n  background: 'white',\n  borderRadius: '100%',\n  border: '1px solid transparent',\n  '&:focus': {\n    outline: 'none',\n    boxShadow: '0 0 0 2px rgba(0, 0, 0, 0.25)',\n    borderColor: 'rgba(0, 0, 0, 1)'\n  }\n});\nvar AspectWrap = /*#__PURE__*/styled('div', {\n  height: 0,\n  position: 'relative'\n});\nvar HandleDecoration = /*#__PURE__*/styled('div', {\n  flex: '1 1 0%',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  pointerEvents: 'all'\n});\nvar HandleCanvasWrap = /*#__PURE__*/styled('div', {\n  display: 'flex',\n  '&:focus': {\n    outline: 'none'\n  }\n});\nvar HandleWrap = /*#__PURE__*/styled('div', {\n  flexShrink: 0,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  zIndex: 1\n});\n\nvar DefaultHandle = function DefaultHandle(props) {\n  var rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return React.createElement(Handle, Object.assign({}, rest));\n};\n\nvar ComparisonSlider = function ComparisonSlider(_ref) {\n  var itemOne = _ref.itemOne,\n      itemTwo = _ref.itemTwo,\n      aspectRatio = _ref.aspectRatio,\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      _ref$handle = _ref.handle,\n      handle = _ref$handle === void 0 ? DefaultHandle : _ref$handle,\n      _ref$handleBefore = _ref.handleBefore,\n      handleBefore = _ref$handleBefore === void 0 ? null : _ref$handleBefore,\n      _ref$handleAfter = _ref.handleAfter,\n      handleAfter = _ref$handleAfter === void 0 ? null : _ref$handleAfter,\n      _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === void 0 ? 'horizontal' : _ref$orientation,\n      _ref$onValueChange = _ref.onValueChange,\n      onValueChange = _ref$onValueChange === void 0 ? function () {} : _ref$onValueChange,\n      _ref$onlyHandleDragga = _ref.onlyHandleDraggable,\n      onlyHandleDraggable = _ref$onlyHandleDragga === void 0 ? false : _ref$onlyHandleDragga;\n\n  var _React$useState = React.useState(false),\n      focused = _React$useState[0],\n      setFocused = _React$useState[1];\n\n  var _React$useState2 = React.useState(defaultValue),\n      localValue = _React$useState2[0],\n      setLocalValue = _React$useState2[1];\n\n  var isControlled = typeof defaultValue === 'undefined' && typeof value !== 'undefined';\n  var isHorizontal = orientation === 'horizontal';\n  var sliderValue = isControlled ? value : localValue;\n  var padding = calculateAspectRatio(aspectRatio);\n  var clipPath = isHorizontal ? \"polygon(\" + sliderValue + \"% 0, 100% 0%, 100% 100%, \" + sliderValue + \"% 100%)\" : \"polygon(0% 100%, 0% \" + (100 - sliderValue) + \"%, 100% \" + (100 - sliderValue) + \"%, 100% 100%)\";\n\n  var handleChange = function handleChange(newValue) {\n    if (isControlled) {\n      onValueChange(newValue);\n    } else {\n      setLocalValue(newValue);\n    }\n  };\n\n  var ItemOne = itemOne && isFunction(itemOne) ? itemOne({\n    value: sliderValue\n  }) : itemOne;\n  var ItemTwo = itemTwo && isFunction(itemTwo) ? itemTwo({\n    value: sliderValue\n  }) : itemTwo;\n  var baseSlides = [React.createElement(React.Fragment, null, ItemOne), React.createElement(React.Fragment, null, ItemTwo)];\n  var direction = isHorizontal ? Direction.Right : Direction.Up;\n  var slides = isHorizontal ? baseSlides : baseSlides.reverse();\n  return React.createElement(AspectWrap, {\n    style: {\n      paddingBottom: padding + \"%\"\n    }\n  }, React.createElement(React.Fragment, null, slides.map(function (content, index) {\n    return React.createElement(Element, {\n      style: {\n        clipPath: index === 1 ? clipPath : ''\n      },\n      key: index\n    }, content);\n  })), React.createElement(RangeWrap, null, React.createElement(Range, {\n    step: 1,\n    min: 0,\n    max: 100,\n    values: [sliderValue],\n    onChange: function onChange(values) {\n      return handleChange(values[0]);\n    },\n    direction: direction,\n    renderTrack: function renderTrack(_ref2) {\n      var props = _ref2.props,\n          children = _ref2.children;\n      return React.createElement(Track, Object.assign({\n        className: \"\"\n      }, props, {\n        style: _extends({}, props.style, {\n          pointerEvents: onlyHandleDraggable ? 'none' : 'all'\n        })\n      }), children);\n    },\n    renderThumb: function renderThumb(params) {\n      var props = _extends({}, params.props, {\n        isFocused: focused\n      });\n\n      return React.createElement(HandleCanvasWrap, Object.assign({}, params.props, {\n        style: _extends({}, params.props.style, {\n          flexDirection: isHorizontal ? 'column' : 'row',\n          height: isHorizontal ? '100%' : 'auto',\n          width: isHorizontal ? 'auto' : '100%'\n        }),\n        onFocus: function onFocus() {\n          return setFocused(true);\n        },\n        onBlur: function onBlur() {\n          return setFocused(false);\n        }\n      }), React.createElement(HandleDecoration, null, handleBefore), React.createElement(HandleWrap, {\n        style: {\n          pointerEvents: 'all'\n        }\n      }, handle(props)), React.createElement(HandleDecoration, null, handleAfter));\n    }\n  })));\n};\n\nexport { ComparisonSlider };","map":{"version":3,"mappings":"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","names":["aspectRatioRegex","RegExp","calculateAspectRatio","ratio","asNumber","Number","asString","String","isNumber","isNaN","match","Error","width","height","isFunction","functionToCheck","toString","call","PinnedDiv","styled","top","left","right","bottom","position","Track","background","zIndex","RangeWrap","Element","Handle","borderRadius","border","outline","boxShadow","borderColor","AspectWrap","HandleDecoration","flex","display","flexDirection","alignItems","justifyContent","pointerEvents","HandleCanvasWrap","HandleWrap","flexShrink","DefaultHandle","props","rest","React","ComparisonSlider","itemOne","itemTwo","aspectRatio","defaultValue","value","handle","handleBefore","_ref$handleBefore","handleAfter","_ref$handleAfter","orientation","_ref$orientation","onValueChange","_ref$onValueChange","onlyHandleDraggable","_ref$onlyHandleDragga","useState","focused","setFocused","localValue","setLocalValue","isControlled","isHorizontal","sliderValue","padding","clipPath","handleChange","newValue","ItemOne","ItemTwo","baseSlides","Fragment","direction","Direction","Right","Up","slides","reverse","style","paddingBottom","map","content","index","key","Range","step","min","max","values","onChange","renderTrack","children","className","renderThumb","params","isFocused","onFocus","onBlur"],"sources":["/home/i2/Documents/Projects/websites/cwcleaning/node_modules/react-comparison-slider/src/util.ts","/home/i2/Documents/Projects/websites/cwcleaning/node_modules/react-comparison-slider/src/index.tsx"],"sourcesContent":["const aspectRatioRegex = new RegExp(/(\\d+)(:|x)(\\d+)/);\n\nexport function calculateAspectRatio(ratio: number | string) {\n  const asNumber = Number(ratio);\n  const asString = String(ratio);\n\n  const isNumber = !isNaN(asNumber);\n\n  if (isNumber) {\n    return (1 / asNumber) * 100;\n  } else {\n    const match = asString.match(aspectRatioRegex);\n    if (!match)\n      throw Error(\n        'Please use a valid aspect ratio delimeter, either \"x\" or \":\"'\n      );\n\n    const width = Number(match[1]);\n    const height = Number(match[3]);\n    return (height / width) * 100;\n  }\n}\n\nexport function isFunction(functionToCheck: Function) {\n  return (\n    functionToCheck && {}.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","import React, { FC } from 'react';\nimport { Direction, Range } from 'react-range';\nimport { IThumbProps } from 'react-range/lib/types';\nimport { styled } from '@stitches/react';\n\nimport { calculateAspectRatio, isFunction } from './util';\n\nexport interface ComparisonSliderHandleProps extends IThumbProps {\n  isFocused: boolean;\n}\n\nexport type ComparisonSliderProps = ComparisonSliderStatefulProps &\n  ComparisonSliderCommonProps;\n\ninterface ComparisonSliderCommonProps {\n  itemOne:\n    | React.ReactNode\n    | (({ value }: { value: number }) => React.ReactNode);\n  itemTwo:\n    | React.ReactNode\n    | (({ value }: { value: number }) => React.ReactNode);\n  aspectRatio: number | string;\n  handleBefore?: React.ReactNode;\n  handleAfter?: React.ReactNode;\n  handle?: (props: ComparisonSliderHandleProps) => React.ReactNode;\n  orientation?: 'vertical' | 'horizontal';\n  onlyHandleDraggable?: boolean;\n}\n\ntype ComparisonSliderStatefulProps =\n  | { defaultValue: number; value?: never; onValueChange?: never }\n  | {\n      value: number;\n      onValueChange: (value: number) => void;\n      defaultValue?: never;\n    };\n\nconst PinnedDiv = styled('div', {\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  position: 'absolute',\n});\n\nconst Track = styled(PinnedDiv, {\n  background: 'transparent',\n  zIndex: 10,\n});\n\nconst RangeWrap = PinnedDiv;\n\nconst Element = styled(PinnedDiv, {\n  '> *': {\n    height: '100%',\n  },\n\n  '> *:not(style) + *': {\n    height: 'unset',\n  },\n});\n\nconst Handle = styled('div', {\n  width: 16,\n  height: 16,\n  background: 'white',\n  borderRadius: '100%',\n  border: '1px solid transparent',\n  '&:focus': {\n    outline: 'none',\n    boxShadow: '0 0 0 2px rgba(0, 0, 0, 0.25)',\n    borderColor: 'rgba(0, 0, 0, 1)',\n  },\n});\n\nconst AspectWrap = styled('div', {\n  height: 0,\n  position: 'relative',\n});\n\nconst HandleDecoration = styled('div', {\n  flex: '1 1 0%',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  pointerEvents: 'all',\n});\n\nconst HandleCanvasWrap = styled('div', {\n  display: 'flex',\n  '&:focus': {\n    outline: 'none',\n  },\n});\n\nconst HandleWrap = styled('div', {\n  flexShrink: 0,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  zIndex: 1,\n});\n\nconst DefaultHandle = (props: ComparisonSliderHandleProps) => {\n  const { isFocused, ...rest } = props;\n  return <Handle {...rest}></Handle>;\n};\n\nexport const ComparisonSlider: FC<ComparisonSliderProps> = ({\n  itemOne,\n  itemTwo,\n  aspectRatio,\n  defaultValue,\n  value,\n  handle = DefaultHandle,\n  handleBefore = null,\n  handleAfter = null,\n  orientation = 'horizontal',\n  onValueChange = () => {},\n  onlyHandleDraggable = false,\n}) => {\n  const [focused, setFocused] = React.useState(false);\n  const [localValue, setLocalValue] = React.useState(defaultValue);\n  const isControlled =\n    typeof defaultValue === 'undefined' && typeof value !== 'undefined';\n\n  const isHorizontal = orientation === 'horizontal';\n\n  const sliderValue = (isControlled ? value : localValue) as number;\n\n  const padding = calculateAspectRatio(aspectRatio);\n  const clipPath = isHorizontal\n    ? `polygon(${sliderValue}% 0, 100% 0%, 100% 100%, ${sliderValue}% 100%)`\n    : `polygon(0% 100%, 0% ${100 - sliderValue}%, 100% ${\n        100 - sliderValue\n      }%, 100% 100%)`;\n\n  const handleChange = (newValue: number) => {\n    if (isControlled) {\n      onValueChange(newValue);\n    } else {\n      setLocalValue(newValue);\n    }\n  };\n\n  const ItemOne =\n    itemOne && isFunction(itemOne as Function)\n      ? (itemOne as Function)({ value: sliderValue })\n      : itemOne;\n\n  const ItemTwo =\n    itemTwo && isFunction(itemTwo as Function)\n      ? (itemTwo as Function)({ value: sliderValue })\n      : itemTwo;\n\n  const baseSlides = [\n    <React.Fragment>{ItemOne}</React.Fragment>,\n    <React.Fragment>{ItemTwo}</React.Fragment>,\n  ];\n\n  const direction = isHorizontal ? Direction.Right : Direction.Up;\n\n  const slides = isHorizontal ? baseSlides : baseSlides.reverse();\n\n  return (\n    <AspectWrap style={{ paddingBottom: `${padding}%` }}>\n      <React.Fragment>\n        {slides.map((content, index) => {\n          return (\n            <Element\n              style={{ clipPath: index === 1 ? clipPath : '' }}\n              key={index}\n            >\n              {content}\n            </Element>\n          );\n        })}\n      </React.Fragment>\n\n      <RangeWrap>\n        <Range\n          step={1}\n          min={0}\n          max={100}\n          values={[sliderValue]}\n          onChange={(values) => handleChange(values[0])}\n          direction={direction}\n          renderTrack={({ props, children }) => (\n            <Track\n              className=\"\"\n              {...props}\n              style={{\n                ...props.style,\n                pointerEvents: onlyHandleDraggable ? 'none' : 'all',\n              }}\n            >\n              {children}\n            </Track>\n          )}\n          renderThumb={(params) => {\n            let props: ComparisonSliderHandleProps = {\n              ...params.props,\n              isFocused: focused,\n            };\n            return (\n              <HandleCanvasWrap\n                {...params.props}\n                style={{\n                  ...params.props.style,\n                  flexDirection: isHorizontal ? 'column' : 'row',\n                  height: isHorizontal ? '100%' : 'auto',\n                  width: isHorizontal ? 'auto' : '100%',\n                }}\n                onFocus={() => setFocused(true)}\n                onBlur={() => setFocused(false)}\n              >\n                <HandleDecoration>{handleBefore}</HandleDecoration>\n                <HandleWrap style={{ pointerEvents: 'all' }}>\n                  {/* @ts-ignore */}\n                  {handle(props)}\n                </HandleWrap>\n                <HandleDecoration>{handleAfter}</HandleDecoration>\n              </HandleCanvasWrap>\n            );\n          }}\n        />\n      </RangeWrap>\n    </AspectWrap>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}